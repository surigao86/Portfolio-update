

@function _length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);
  
  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }
  
  @return $number * nth($units, $index);
}

@function number($string) {
  
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;
  
  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);
    
  
    @if $character == '-' {
      $minus: true;
    }
    
    @else if $character == '.' {
      $divider: 1;
    }
    
    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return _length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);
      
      @if $divider == 0 {
        $result: $result * 10;
      }
      
      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }
      
      $result: $result + $number;
    }
  }
  @return if($minus, $result * -1, $result);
}

@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}
@function changeunit($number, $unit: '') {
	@return number(strip-units($number)+$unit);
}

@mixin image-2x($image, $width: 0, $height: 0) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    
    @if $width == 'contain' {
      background-size: contain;
    }
    @elseif $width == 'cover' {
      background-size: cover;
    }
    @else {
      background-size: $width $height;
    }
  }
}

// spacer
$spacing: 1.5rem;
$gutter: 3rem;
$grid-spacing: 30px;
// max width of PSD layout
$screen-max:		1440px;

// Media queries breakpoints
$screen-xs-min:		480px;
$screen-sm-min:		768px;
$screen-md-min:		992px;
$screen-lg-min:		1200px;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:		($screen-sm-min - 1);
$screen-sm-max:		($screen-md-min - 1);
$screen-md-max:		($screen-lg-min - 1);
$screen-lg-max: 	($screen-max - 1);

// Grid system

// Number of columns in the grid.
$grid-columns:			12;
// Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:		$grid-spacing;

$grid-float-breakpoint:			$screen-sm-min;
$grid-float-breakpoint-max:		($grid-float-breakpoint - 1);


//== Container sizes

// Define the maximum width of `.container` for different screen sizes.

$container-sm:		(720px + $grid-gutter-width);
$container-md:		(940px + $grid-gutter-width);
$container-lg:		(1140px + $grid-gutter-width);

$base-size: 1.6em;

$image-path: '/img2/';

// Typography
$font-family:		"proxima-nova", "Helvetica Neue", Helvetica, arial, sans-serif;
$font-family-condensed: "proxima-nova-condensed", "Helvetica Neue", Helvetica, arial, sans-serif;
$font-family-serif: "poynter-oldstyle-display", serif;
$font-size:			changeunit($base-size,rem);
$font-color:		#535356;
$line-height:		1.5;
$font-size-sm:		1.6rem;
$font-size-xs:		1.5rem;
$font-size-lg: 		1.8rem;

// Base
$animation-speed: .25s;

// Sizes
$header-height: 9rem;
$header-height-fixed: 8rem;
$header-animation-speed: .3s;
$sidebar-width: 22.5rem;

// alternate color schemes 
$color-purple: 		#723080;
$color-green: 		#3da07b;
$color-orange:     #df9025;
$color-blue:    #5191b7;
$color-darkblue: 		#2676a5;
$color-darkgrey:	#3d3f3e;
$color-litegrey: 	#f3f3f4;
$border-grey:		#e2e2e3;
$link-color: $color-darkblue;
